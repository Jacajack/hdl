module mod{
	input clock clk;
	input async nreset;
	input comb(clk) en;
	input comb(clk) unsigned<16> next;
	output sync(clk) unsigned<16> data;
}
impl mod{
	data = 0;
}


module m {}
impl m {
	clock wire clk = (clock wire)0u1;
	comb(clk) auto next = 4u16;
	sync(clk) unsigned auto out; 
	async wire nreset = 1;
	comb(clk) wire en = 1;
	mod register_like {
		clk,
		nreset: nreset,
		en: en,
		next: next,
		data: out,
	}
	auto d = register_like.data;
	auto e = register_like.en;
	auto n = register_like.next;
	auto c = register_like.clk;
	auto r = register_like.nreset;
}
