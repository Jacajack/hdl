name: Main CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

env:
  CARGO_TERM_COLOR: always

jobs:
  cargo-fmt:
    name: "Format rust code"
    if: ${{ vars.CI_CARGO_FMT_ENABLED == 'true' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
    
    - name: Use nightly toolchain for formatting
      run: |
        rustup default nightly
        rustup component add rustfmt
    
    - name: Run cargo fmt
      run: cargo fmt --all
    
    - name: Commit & push changes
      uses: EndBug/add-and-commit@v9
      with:
        default_author: github_actions
        message: '[bot] Format Rust code'

  cargo-build:
    name: Cargo build
    if: ${{ always() }}
    needs: [cargo-fmt]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose
    - uses: Swatinem/rust-cache@v2
      with:
        shared-key: "post-cargo-build"
    
  cargo-test:
    name: Cargo test
    if: ${{ always() && needs.cargo-build.result == 'success' }}
    needs: [cargo-build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
      with:
          shared-key: "post-cargo-build"
    - name: Install iVerilog
      run: sudo apt-get install -y iverilog
    - name: Tests
      run: cargo test --workspace --verbose

  parser-fuzz-test:
    name: Parser fuzz test (constant seed)
    if: ${{ always() && needs.cargo-build.result == 'success' }}
    needs: [cargo-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
        with:
            shared-key: "post-cargo-build"
      - name: Python setup
        run: pip3 install fuzzingbook
      - name: Fuzzer tests
        run: utils/parser_test.py --seed 3721

  gather-coverage:
    name: Gather coverage
    if: ${{ always() && needs.cargo-test.result == 'success' }}
    needs: [cargo-test]
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:develop-nightly
      options: --security-opt seccomp=unconfined
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install iVerilog
        run: |
            apt-get update
            apt-get install -y iverilog
      - name: Generate code coverage
        run: |
          cargo +nightly tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: true
