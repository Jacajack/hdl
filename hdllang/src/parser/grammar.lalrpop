use crate::parser::ast::*;
use crate::lexer::*;
use crate::parser::*;
use crate::core::CompilerError;
use crate::SourceSpan;
grammar<'source>(ctx: & mut ParserContext<'source>, source: Option<&'source String>);
MetadataComments = NonEmptySpace<"MC">;
pub Izulu: Root={
	<start: @L> <definitions:Space<TopDefinition>> <end: @R> =>
		Root{
			definitions,
			location:SourceSpan::new_between(start,end),
		}
}
pub TopDefinition: TopDefinition={
	<start: @L> <mc:MetadataComments ?> "module" <id:"Id"> <end: @R> "{" <statements:Space<ModuleDeclStmt>> "}"  =>
		{
			let metadata = match mc{
			Some(mc) => mc,
			None => vec![],
		};
		TopDefinition::ModuleDeclaration(ModuleDeclaration{
			metadata,
			id,
			statements,
			location:SourceSpan::new_between(start,end),
		})
	},
	<start: @L> <mc:MetadataComments ?> "impl" <id:"Id">  <statement:ModuleImplBlockStmt>  <end: @R> =>
	{
		let metadata = match mc{
		Some(mc) => mc,
		None => vec![],
	};	
	TopDefinition::ModuleImplementation(ModuleImplementation{
			metadata,
			id,
			statement,
			location:SourceSpan::new_between(start,end),
		})},
	<start: @L> <mc:MetadataComments ?> "package" <path:ImportPath> ";"  <end: @R> =>
		{
			let metadata = match mc{
				Some(mc) => mc,
				None => vec![],
			};
			TopDefinition::PackageDeclaration(PackageDeclaration{
				metadata,
				path,
				location:SourceSpan::new_between(start,end),
			})
		},
		<start: @L> <mc:MetadataComments ?> "use" <path:SingleImportPath> ";"  <end: @R> =>
		{
			let metadata = match mc{
				Some(mc) => mc,
				None => vec![],
			};
			TopDefinition::UseStatement(UseStatement{
				metadata,
				path,
				location:SourceSpan::new_between(start,end),
			})
		},
}
pub ImportPath: ImportPath={
	SingleImportPath,
	MultipleImportPath,
}
SingleImportPath: ImportPath={
	<start: @L> <quantity: ("super" "::")+> <p:DoubleColon<"Id">?> <modules:SingleModule> <end: @R> =>{
		let path = match p{
			Some(path) => path,
			None => vec![],
		};
		ImportPath{
			start:Start::Super{
				number: quantity.len()
			},
			path,
			modules,
			location:SourceSpan::new_between(start,end),
		}
	},
	<start: @L> "root" "::" <path:DoubleColon<"Id">> <modules:SingleModule> <end: @R> =>{
		ImportPath{
			start:Start::Root,
			path,
			modules,
			location:SourceSpan::new_between(start,end),
		}
	},
	<start: @L> <path:DoubleColon<"Id">> <modules:SingleModule> <end: @R> =>{
		ImportPath{
			start:Start::Local,
			path,
			modules,
			location:SourceSpan::new_between(start,end),
		}
	},
	<start: @L> <modules:SingleModule> <end: @R> =>{
		ImportPath{
			start: Start::Local,
			path: vec![],
			modules,
			location:SourceSpan::new_between(start,end),
		}
	},
}
MultipleImportPath: ImportPath={
	<start: @L> <quantity: ("super" "::")+> <p:DoubleColon<"Id">?> <modules:MultipleModules> <end: @R> =>{
		let path = match p{
			Some(path) => path,
			None => vec![],
		};
		ImportPath{
			start:Start::Super{
				number: quantity.len()
			},
			path,
			modules,
			location:SourceSpan::new_between(start,end),
		}
	},
	<start: @L> "root" "::" <path:DoubleColon<"Id">> <modules:MultipleModules> <end: @R> =>{
		ImportPath{
			start:Start::Root,
			path,
			modules,
			location:SourceSpan::new_between(start,end),
		}
	},
	<start: @L> "::" <path:DoubleColon<"Id">> <modules:MultipleModules> <end: @R> =>{
		ImportPath{
			start:Start::Root,
			path,
			modules,
			location:SourceSpan::new_between(start,end),
		}
	},
	<start: @L> <path:DoubleColon<"Id">> <modules:MultipleModules> <end: @R> =>{
		ImportPath{
			start:Start::Local,
			path,
			modules,
			location:SourceSpan::new_between(start,end),
		}
	},
}
SingleModule: Modules={
	<id:"Id"> => Modules::Specific{modules: vec![id]},
}
MultipleModules :Modules = {
	"{" <modules:NonEmptyOptComma<"Id">> "}" => Modules::Specific{modules},
	"*" => Modules::All,
}
pub ModuleImplStmt: ModuleImplementationStatement = {
	<block:VarBlock> =>
		ModuleImplementationStatement::VariableBlock(block),
	<definition:VarDef> =>
		ModuleImplementationStatement::VariableDefinition(definition),
	<start: @L>  <lhs:PostfixExpr> <assignment_opcode:AssignmentOP> <rhs:ExprWithTuple> ";" <end: @R> =>
		ModuleImplementationStatement::AssignmentStatement(AssignmentStatement{
			lhs,
			assignment_opcode,
			rhs,
			location:SourceSpan::new_between(start,end),
	    }),	
	<start: @L> "for" "(" <id:"Id">"in"<range:RangeExpr> ")" <statement:ModuleImplBlockStmt> <end: @R> =>
		ModuleImplementationStatement::IterationStatement(IterationStatement{
			id,
			range,
			statement: Box::new(statement),
			location:SourceSpan::new_between(start,end),
		}),
	<start: @L> <mc :MetadataComments?> <module_name:SingleImportPath> <instance_name:"Id"> "{" <port_bind:NonEmptyOptComma<PortBindStmt>> "}" <a:";"?> <end: @R> =>
		{
			let metadata = match mc{
			Some(mc) => mc,
			None => vec![],
		};		
		ModuleImplementationStatement::InstantiationStatement(InstantiationStatement{
				metadata,
				module_name,
				instance_name,
				port_bind,
				location:SourceSpan::new_between(start,end),
		})
		},
		ModuleImplBlockStmt,	
		IfStmt,			
}
ModuleImplBlockStmt: ModuleImplementationStatement ={
	<start: @L>  "{" <statements:NonEmptySpace<ModuleImplStmt>> "}" <end: @R> =>
		ModuleImplementationStatement::ModuleImplementationBlockStatement(ModuleImplementationBlockStatement{
			statements,
			location:SourceSpan::new_between(start,end),
		}),
	<start: @L>  "{"  "}" <end: @R> =>
		ModuleImplementationStatement::ModuleImplementationBlockStatement(ModuleImplementationBlockStatement{
			statements:vec![],
			location:SourceSpan::new_between(start,end),
		}),
}
IfStmt: ModuleImplementationStatement ={
	<start: @L> "if"  "(" <condition:Expr> ")" <if_statement:ModuleImplBlockStmt> "else" <else_statement:ModuleImplBlockStmt> <end: @R> =>
		ModuleImplementationStatement::IfElseStatement(IfElseStatement{
			condition,
			if_statement: Box::new(if_statement),
			else_statement: Some(Box::new(else_statement)),
			location:SourceSpan::new_between(start,end),
	    }),
	<start: @L> "if"  "(" <condition:Expr> ")" <if_statement:ModuleImplBlockStmt> "else" <else_statement:IfStmt> <end: @R> =>
		ModuleImplementationStatement::IfElseStatement(IfElseStatement{
			condition,
			if_statement: Box::new(if_statement),
			else_statement: Some(Box::new(else_statement)),
			location:SourceSpan::new_between(start,end),
	    }),
	<start: @L> "if" "(" <condition:Expr> ")"  <if_statement:ModuleImplBlockStmt> <end: @R> =>
		ModuleImplementationStatement::IfElseStatement(IfElseStatement{
				condition,
				if_statement: Box::new(if_statement),
				else_statement: None,
				location:SourceSpan::new_between(start,end),
	    	}),
}
pub PortBindStmt: PortBindStatement={
	<start:@L> <id:"Id"> <end:@R> =>
		PortBindStatement::OnlyId(OnlyId{
			id,
			location:SourceSpan::new_between(start,end),
		}),
	<start:@L> <id:"Id"> ":" <expression:ExprWithTuple> <end:@R> =>
		PortBindStatement::IdWithExpression(IdWithExpression{
			id,
			expression,
			location:SourceSpan::new_between(start, end),
		}),
	<start:@L> <id:"Id"> ":" <declaration:SingleVarDecl> <end:@R> =>
		PortBindStatement::IdWithDeclaration(IdWithDeclaration{
			id,
			declaration,
			location:SourceSpan::new_between(start, end),
		}),
}
VarDef: VariableDefinition={
	<start: @L> <mc: MetadataComments ?> <type_declarator:TypeDeclarator> <initializer_list:NonEmptyComma<DirectInitializer>>  ";" <end: @R> =>
	{
		let metadata = match mc{
		Some(mc) => mc,
		None => vec![],
	};	
	VariableDefinition{
		metadata,
		type_declarator,
		initializer_list,
		location:SourceSpan::new_between(start,end),
	}
}
}
DirectInitializer: DirectInitializer = {
	<start: @L>  <declarator:DirectDecl> <end: @R> =>{
		let expression = None;
		DirectInitializer{
			declarator,
			expression,
			location:SourceSpan::new_between(start,end),
		}},
	<start: @L>  <declarator:DirectDecl> "=" <expr:ExprWithTuple> <end: @R> =>
	{
	let expression = Some(expr);
	DirectInitializer{
		declarator,
		expression,
		location:SourceSpan::new_between(start,end),
	}
},
}
ModuleDeclStmt: ModuleDeclarationStatement={
	<start: @L> <mc: MetadataComments?> <type_declarator:TypeDeclarator> <direct_declarators:NonEmptyComma<DirectDecl>> ";" <end: @R>=>
	{
		let metadata = match mc{
		Some(mc) => mc,
		None => vec![],
		};		
		ModuleDeclarationStatement::VariableDeclarationStatement(VariableDeclarationStatement{
			metadata,
			type_declarator,
			direct_declarators,
			location:SourceSpan::new_between(start,end),
		})
	},
	<start: @L> <mc: MetadataComments ?> <dir:Direction?> <mut types:NonEmptySpace<Qualifier>> "{" <statements:Space<ModuleDeclStmt>> "}" ";"? <end: @R> =>
		{
			let metadata = match mc{
			Some(mc) => mc,
			None => vec![],
		};	
		if let Some(d)=dir{
			types.splice(0..0, [d]);
		};
		ModuleDeclarationStatement::VariableBlock(ModuleDeclarationVariableBlock{
			metadata,
			types,
			statements,
			location:SourceSpan::new_between(start,end),
		})
	},
	<start: @L> <mc: MetadataComments ?> <dir:Direction>  "{" <statements:Space<ModuleDeclStmt>> "}" ";"? <end: @R> =>
	{
		let metadata = match mc{
		Some(mc) => mc,
		None => vec![],
	};
	ModuleDeclarationStatement::VariableBlock(ModuleDeclarationVariableBlock{
		metadata,
		types: vec![dir],
		statements,
		location:SourceSpan::new_between(start,end),
	})
	},
	
}
VarBlock: VariableBlock ={
	<start: @L> <mc: MetadataComments ?> <dir:Direction?> <mut types:NonEmptySpace<Qualifier>> "{" <statements:Space<VarBlockStmt>> "}" ";"? <end: @R> =>
		{
			let metadata = match mc{
			Some(mc) => mc,
			None => vec![],
		};	
		if let Some(d)=dir{
			types.splice(0..0, [d]);
		};
		VariableBlock{
			metadata,
			types,
			statements,
			location:SourceSpan::new_between(start,end),
		}
	},
	<start: @L> <mc: MetadataComments ?> <dir:Direction>  "{" <statements:Space<VarBlockStmt>> "}" ";"? <end: @R> =>
	{
		let metadata = match mc{
		Some(mc) => mc,
		None => vec![],
	};
	VariableBlock{
		metadata,
		types: vec![dir],
		statements,
		location:SourceSpan::new_between(start,end),
	}
	},
}
VarBlockStmt: VariableBlockStatement={
	<block:VarBlock> =>	VariableBlockStatement::VariableBlock(block),
	<definition:VarDef> => VariableBlockStatement::VariableDefinition(definition),
}

//VarDecl: VariableDeclaration = {
//	<start: @L> <mc: MetadataComments?> <type_declarator:TypeDeclarator> <direct_declarators:NonEmptyComma<DirectDecl>> <end: @R>=>
//	{
//		let metadata = match mc{
//		Some(mc) => mc,
//		None => vec![],
//		};		
//		VariableDeclaration{
//			metadata,
//			type_declarator,
//			direct_declarators,
//			location:SourceSpan::new_between(start,end),
//		}
//	},
//}
SingleVarDecl: VariableDeclaration = {
	<start: @L>  <type_declarator:TypeDeclarator> <direct_declarator:DirectDecl> <end: @R>=>
		VariableDeclaration{
			metadata:vec![],
			type_declarator,
			direct_declarators: vec![direct_declarator],
			location:SourceSpan::new_between(start,end),
		},
}
DirectDecl: DirectDeclarator = {
	<start: @L>  <name:"Id"> <array_declarators:Space<IndexExpr>> <end: @R>=>
		DirectDeclarator{
			name,
			array_declarators,
			location:SourceSpan::new_between(start,end),
		}
}

MatchExpressionStatement: MatchExpressionStatement = {
	<start: @L> <antecedent:MatchExpressionAntecendent> "=>" <expression:Expr> <end: @R> =>
		MatchExpressionStatement{
			antecedent,
			expression,
			location:SourceSpan::new_between(start,end),
		}
}
MatchExpressionAntecendent: MatchExpressionAntecendent = {
	<start: @L> <expressions:NonEmptyComma<Expr>> <end: @R> => MatchExpressionAntecendent::Expression{
		expressions,
		location:SourceSpan::new_between(start,end),
	},
	<start:@L> "default" <end:@R> =>MatchExpressionAntecendent::Default{
		location:SourceSpan::new_between(start,end),
	},
}
PrimaryExpression : Expression = {
	<start:@L> <key:"NumericConstant"> <end:@R> => 
		Expression::Number(Number{
			key,
			location:SourceSpan::new_between(start,end)
		}),
	<start:@L> <id:"Id"> <end:@R> => 
		Expression::Identifier(Identifier{
			id,
			location:SourceSpan::new_between(start,end),
		}),
	<start:@L> "(" <expression:Expr> ")" <end:@R> => 
		Expression::ParenthesizedExpression(ParenthesizedExpression{
			expression: Box::new(expression),
			location:SourceSpan::new_between(start,end)
		}),	
	<start:@L> "match" "(" <value:Expr> ")" "{" <statements:NonEmptyOptComma<MatchExpressionStatement>> "}" <end:@R> =>
		Expression::MatchExpression(MatchExpression{
			value: Box::new(value),
			statements,
			location:SourceSpan::new_between(start,end),
		}),
	<start:@L> "conditional" "{" <statements:NonEmptyOptComma<MatchExpressionStatement>> "}" <end:@R> =>
		Expression::ConditionalExpression(ConditionalExpression{
			statements,
			location:SourceSpan::new_between(start,end),
		}),
}
ExprWithTuple : Expression={
	TupleExpr,
	Expr,
}
TupleExpr : Expression ={
	<start:@L> "{" <expressions:OptComma<Expr>> "}" <end:@R> =>
		Expression::Tuple(Tuple{
			expressions,
			location:SourceSpan::new_between(start,end)
		}),
}
pub RangeExpr :  RangeExpression = {
	<start:@L> "[" <lhs:Expr> <code:RangeOp> <rhs:Expr> "]" <end:@R> =>
		RangeExpression{
			lhs: Box::new(lhs),
			rhs: Box::new(rhs),
			code,
			location:SourceSpan::new_between(start,end)
		}
}
IndexExpr : Expression ={
	"[" <Expr> "]"
}
PostfixExpr : Expression = {
	<start:@L> <expression:PostfixExpr> "." <id:"Id"> <end:@R> =>
		Expression::PostfixWithId(PostfixWithId{
			expression: Box::new(expression),
			id,
			location:SourceSpan::new_between(start,end),
		}),
	<start:@L> <expression:PostfixExpr> <index:IndexExpr> <end:@R> =>
		Expression::PostfixWithIndex(PostfixWithIndex{
			expression: Box::new(expression),
			index: Box::new(index),
			location:SourceSpan::new_between(start,end),
		}),
	<start:@L> <expression:PostfixExpr> <range:RangeExpr> <end:@R> =>
		Expression::PostfixWithRange(PostfixWithRange{
			expression: Box::new(expression),
			range,
			location:SourceSpan::new_between(start,end),
		}),
	<start:@L> <id:"Id"> "(" <args:ArgumentList ?> ")" <end:@R> =>
		match args{
			None => {
				let argument_list= vec![];
					Expression::PostfixWithArgs(PostfixWithArgs{
					id,
					argument_list,
					location:SourceSpan::new_between(start,end),
				})
			},
			Some(argument_list) =>
				Expression::PostfixWithArgs(PostfixWithArgs{
					id,
					argument_list,
					location:SourceSpan::new_between(start,end),
				}),
		},		
	PrimaryExpression,
}
UnaryExpr : Expression ={
	<start:@L> <code:UnaryExprOP> <expression:UnaryExpr>  <end:@R> => 
		Expression::UnaryOperatorExpression(UnaryOperatorExpression{
			expression : Box::new(expression),
			code,
			location:SourceSpan::new_between(start,end),
		}),
	<start:@L> "(" <type_name:TypeName> ")" <expression:UnaryExpr>  <end:@R> => 
		Expression::UnaryCastExpression(UnaryCastExpression{
			type_name,
			expression : Box::new(expression),
			location:SourceSpan::new_between(start,end),
		}),
	PostfixExpr,
}
Factor = Tier<FactorOp, UnaryExpr>;
Sum = Tier<AddOp, Factor>;
Shift = Tier<ShiftOp,Sum>;
BitwiseAnd = Tier<BitwiseAndOp,Shift>;
BitwiseXor = Tier<BitwiseXorOp,BitwiseAnd>;
BitwiseOr= Tier<BitwiseOrOp,BitwiseXor>;
Comparison = Tier<RelationalOp,BitwiseOr>;
Equality = Tier<EqualityOp,Comparison>;
LogicalAnd = Tier<LAandOP,Equality>;
LogicalOr = Tier<LOrOp,LogicalAnd>;
TernaryExpression : Expression = {
	<start:@L> <condition:LogicalOr> "?" <true_branch:TernaryExpression>  ":" <false_branch:TernaryExpression> <end:@R> => 
		Expression::TernaryExpression(TernaryExpression{
			condition: Box::new(condition),
			true_branch: Box::new(true_branch),
			false_branch: Box::new(false_branch),
			location:SourceSpan::new_between(start,end),
		}),
		LogicalOr
}

pub Expr=TernaryExpression;
Tier<Op,NextTier> : Expression = {
    <start:@L> <lhs:Tier<Op,NextTier>> <code:Op> <rhs:NextTier> <end:@R> => 
		Expression::BinaryExpression(BinaryExpression{
			lhs : Box::new(lhs),
			rhs : Box::new(rhs),
			code,
			location:SourceSpan::new_between(start,end),
		}),
    	NextTier
};
ArgumentList=NonEmptyComma<Expr>;
NonEmptyComma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T> => match v.len() { // (2)
        0 => vec![e],
        _ => {
            v.push(e);
            v
        }
    }
};
OptComma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
#[inline]
DoubleColon<T>: Vec<T> = { // (1)
    <v:(<T> "::")+> => v
};
NonEmptyOptComma<T>: Vec<T> = { // (1)
    <b:T> <mut v:("," <T>)*> ","? => match v.len() { // (2)
        0 => {
			v.push(b);
			v
		}
        _  => {
            v.splice(0..0, [b]);
            v
        }
    }
};
Space<T>: Vec<T> = { // (1)
    <v:(<T>)*> => v
};
NonEmptySpace<T>: Vec<T> = { // (1)
    <v:(<T>)+> => v
};
RangeOp: RangeOpcode={
	":"  => RangeOpcode::Colon,
	"+:" => RangeOpcode::PlusColon,
	":<" => RangeOpcode::ColonLessThan,
}
ShiftOp: BinaryOpcode={
	">>" => BinaryOpcode::RShift,
	"<<" => BinaryOpcode::LShift,
}
BitwiseAndOp: BinaryOpcode={
	"&" => BinaryOpcode::BitwiseAnd
}
BitwiseXorOp: BinaryOpcode={
	"^" => BinaryOpcode::BitwiseXor
}
BitwiseOrOp:BinaryOpcode={
	"|" => BinaryOpcode::BitwiseOr
}
RelationalOp: BinaryOpcode={
	">" => BinaryOpcode::Greater,
	"<" => BinaryOpcode::Less,
	"<=" => BinaryOpcode::LessEqual,
	">=" => BinaryOpcode::GreaterEqual
}
EqualityOp: BinaryOpcode = {
	"==" => BinaryOpcode::Equal,
	"!=" => BinaryOpcode::NotEqual,
}
LAandOP: BinaryOpcode= {
	"&&" => BinaryOpcode::LogicalAnd
}
LOrOp: BinaryOpcode ={
	"||" => BinaryOpcode::LogicalOr
}
AddOp: BinaryOpcode = { // (3)
    "+" => BinaryOpcode::Addition,
    "-" => BinaryOpcode::Subtraction,
};
FactorOp: BinaryOpcode = {
    "*" => BinaryOpcode::Multiplication,
	"%" => BinaryOpcode::Modulo,
    "/" => BinaryOpcode::Division,
};
UnaryExprOP :UnaryOpcode={
	"~" => UnaryOpcode::BitwiseNot,
	"!" => UnaryOpcode::LogicalNot,
	"+" => UnaryOpcode::Plus,
	"-" => UnaryOpcode::Minus,
}
AssignmentOP: AssignmentOpcode={
	"="  => AssignmentOpcode::Equal,
	"+=" => AssignmentOpcode::PlusEqual,
	"&=" => AssignmentOpcode::AndEqual,
	"^=" => AssignmentOpcode::XorEqual,
	"|=" => AssignmentOpcode::OrEqual,
}
SynType: TypeSpecifier ={
	<start:@L> "auto" <end:@R> => TypeSpecifier::Auto{
		location:SourceSpan::new_between(start,end),
	},
	<start:@L> "wire" <end:@R> => TypeSpecifier::Wire{
		location:SourceSpan::new_between(start,end),
	},
	<start:@L> "bus" <width:VecDecl> <end:@R> => TypeSpecifier::Bus(Bus{
		width: Box::new(width),
		location:SourceSpan::new_between(start,end),
		compiled_width: None,
	}),
}
CompType: TypeSpecifier = {
	<start:@L> "int" <end:@R> => TypeSpecifier::Int{
		location:SourceSpan::new_between(start,end),
	},	
	<start:@L> "bool" <end:@R> => TypeSpecifier::Bool{
		location:SourceSpan::new_between(start,end),
	},	
}
VecDecl: Expression={
	"<" <PrimaryExpression> ">",
}
QualifierWithDirection={
	Direction,
	Qualifier,
}
Direction: TypeQualifier={
	<start:@L> "input" <end:@R> => TypeQualifier::Input{
		location:SourceSpan::new_between(start,end),
	},
	<start:@L> "output" <end:@R> => TypeQualifier::Output{
		location:SourceSpan::new_between(start,end),
	},
}
Qualifier: TypeQualifier = {
	<start:@L> "signed" <end:@R> => TypeQualifier::Signed{
		location:SourceSpan::new_between(start,end),
	},
	<start:@L> "unsigned" <end:@R> => TypeQualifier::Unsigned{
		location:SourceSpan::new_between(start,end),
	},
	<start:@L> "tristate" <end:@R> => TypeQualifier::Tristate{
		location:SourceSpan::new_between(start,end),
	},
	<start:@L> "const" <end:@R> => TypeQualifier::Const{
		location:SourceSpan::new_between(start,end),
	},
	<start:@L> "async" <end:@R> => TypeQualifier::Async{
		location:SourceSpan::new_between(start,end),
	},
	<start:@L> "comb" "(" <expressions:NonEmptyComma<Expr>> ")" <end:@R> => TypeQualifier::Comb(Comb{
		expressions,
		location:SourceSpan::new_between(start,end),
	}),
	<start:@L> "sync" "(" <expressions:NonEmptyComma<Expr>> ")" <end:@R> => TypeQualifier::Sync(Sync{
		expressions,
		location:SourceSpan::new_between(start,end),
	}),
	<start:@L> "clock" <end:@R> => TypeQualifier::Clock{
		location:SourceSpan::new_between(start,end),
	},
	
}
TypeDeclarator: TypeDeclarator ={
	<start:@L> <dir:Direction?> <mut qualifiers:Space<Qualifier>> <specifier:SynType> <end:@R> =>{
		if let Some(d)=dir{
			qualifiers.splice(0..0, [d]);
		};
		TypeDeclarator{
		specifier,
		qualifiers,
		location:SourceSpan::new_between(start,end),
		}
	},
	<start:@L> <specifier:CompType> <end:@R> =>{
		let qualifiers = vec![];
		TypeDeclarator{
		specifier,
		qualifiers,
		location:SourceSpan::new_between(start,end),
		}
	},
	<start:@L> <dir:Direction?> <mut qualifiers:NonEmptySpace<Qualifier>> <bus_expr:VecDecl?> <end:@R> =>{
		if let Some(d)=dir{
			qualifiers.splice(0..0, [d]);
		};
		let specifier = match bus_expr{
			Some(expr) => TypeSpecifier::Bus(Bus{
				location: expr.get_location(),
				width: Box::new(expr),
				compiled_width: None,
			}),
			None => TypeSpecifier::Wire{
				location:SourceSpan::new_between(start,end),
			},
		};
		TypeDeclarator{
		specifier,
		qualifiers,
		location:SourceSpan::new_between(start,end),
		}
	},
	<start:@L> <dir:Direction> <bus_expr:VecDecl?> <end:@R> =>{
		let qualifiers = vec![dir];
		let specifier = match bus_expr{
			Some(expr) => TypeSpecifier::Bus(Bus{
				location: expr.get_location(),
				width: Box::new(expr),
				compiled_width: None,
			}),
			None => TypeSpecifier::Wire{
				location:SourceSpan::new_between(start,end),
			},
		};
		TypeDeclarator{
		specifier,
		qualifiers,
		location:SourceSpan::new_between(start,end),
		}
	},
}
TypeName: TypeName ={
	<start:@L> <declarator:TypeDeclarator> <array_declarators:Space<IndexExpr>> <end:@R> => TypeName{
		declarator,
		array_declarators,
		location:SourceSpan::new_between(start,end),
	}
}
extern {
    type Location = usize;
    type Error = CompilerError;
  
    enum TokenKind {
		"NumericConstant" => TokenKind::NumericConstant(<NumericConstantTableKey>),
		"Id"              => TokenKind::Id(<IdTableKey>),
		"module"          => TokenKind::Keyword(KeywordKind::Module),
		"input"           => TokenKind::Keyword(KeywordKind::Input),
		"output"          => TokenKind::Keyword(KeywordKind::Output),
		"wire"            => TokenKind::Keyword(KeywordKind::Wire),
		"sync"            => TokenKind::Keyword(KeywordKind::Sync),
		"async"           => TokenKind::Keyword(KeywordKind::Async),
		"clock"           => TokenKind::Keyword(KeywordKind::Clock),
		"impl"            => TokenKind::Keyword(KeywordKind::Impl),
		"conditional"     => TokenKind::Keyword(KeywordKind::Conditional),
		"match"           => TokenKind::Keyword(KeywordKind::Match),
		"bus"             => TokenKind::Keyword(KeywordKind::Bus),
		"comb"            => TokenKind::Keyword(KeywordKind::Comb),
		"tristate"        => TokenKind::Keyword(KeywordKind::Tristate),
		"int"             => TokenKind::Keyword(KeywordKind::Int),
		"signed"          => TokenKind::Keyword(KeywordKind::Signed),
		"unsigned"        => TokenKind::Keyword(KeywordKind::Unsigned),
		"default"         => TokenKind::Keyword(KeywordKind::Default),
		"auto"            => TokenKind::Keyword(KeywordKind::Auto),
		"unused"          => TokenKind::Keyword(KeywordKind::Unused),
		"const"           => TokenKind::Keyword(KeywordKind::Const),
		"enum"            => TokenKind::Keyword(KeywordKind::Enum),
		"if"              => TokenKind::Keyword(KeywordKind::If),
		"else"            => TokenKind::Keyword(KeywordKind::Else),
		"in"              => TokenKind::Keyword(KeywordKind::In),
		"for"             => TokenKind::Keyword(KeywordKind::For),
		"bool"            => TokenKind::Keyword(KeywordKind::Bool),
		"super"           => TokenKind::Keyword(KeywordKind::Super),
		"package"         => TokenKind::Keyword(KeywordKind::Package),
		"use"             => TokenKind::Keyword(KeywordKind::Use),
		"root"            => TokenKind::Keyword(KeywordKind::Root),
		"("               => TokenKind::Punctuator(PunctuatorKind::LPar),
		")"               => TokenKind::Punctuator(PunctuatorKind::RPar),
		"{"               => TokenKind::Punctuator(PunctuatorKind::LBrace),
		"}"               => TokenKind::Punctuator(PunctuatorKind::RBrace),
		"["               => TokenKind::Punctuator(PunctuatorKind::LBracket),
		"]"               => TokenKind::Punctuator(PunctuatorKind::RBracket),
		";"               => TokenKind::Punctuator(PunctuatorKind::Semicolon),
		"+"               => TokenKind::Punctuator(PunctuatorKind::Plus),
		"-"               => TokenKind::Punctuator(PunctuatorKind::Minus),
		"!"               => TokenKind::Punctuator(PunctuatorKind::LogicalNot),
		"~"               => TokenKind::Punctuator(PunctuatorKind::BitwiseNot),
		"/"               => TokenKind::Punctuator(PunctuatorKind::Slash),
		"*"               => TokenKind::Punctuator(PunctuatorKind::Asterisk),
		"="               => TokenKind::Punctuator(PunctuatorKind::Assignment),
		"+="              => TokenKind::Punctuator(PunctuatorKind::AssignmentPlus),
		"&="              => TokenKind::Punctuator(PunctuatorKind::AssignmentAnd),
		"^="              => TokenKind::Punctuator(PunctuatorKind::AssignmentXor),
		"|="              => TokenKind::Punctuator(PunctuatorKind::AssignmentOr),
		"%"               => TokenKind::Punctuator(PunctuatorKind::Modulo),
		","				  => TokenKind::Punctuator(PunctuatorKind::Comma),
		"."				  => TokenKind::Punctuator(PunctuatorKind::Dot),
		"|"				  => TokenKind::Punctuator(PunctuatorKind::BitwiseOr),
		"^"				  => TokenKind::Punctuator(PunctuatorKind::BitwiseXor),
		"&"				  => TokenKind::Punctuator(PunctuatorKind::BitwiseAnd),
		">"				  => TokenKind::Punctuator(PunctuatorKind::Greater),
		"<"				  => TokenKind::Punctuator(PunctuatorKind::Less),
		"?"				  => TokenKind::Punctuator(PunctuatorKind::QuestionMark),
		":"				  => TokenKind::Punctuator(PunctuatorKind::Colon),
		"::"              => TokenKind::Punctuator(PunctuatorKind::DoubleColon),
		">>"			  => TokenKind::Punctuator(PunctuatorKind::RShift),
		"<<"			  => TokenKind::Punctuator(PunctuatorKind::LShift),
		"<="			  => TokenKind::Punctuator(PunctuatorKind::LessEqual),
		">="			  => TokenKind::Punctuator(PunctuatorKind::GreaterEqual),
		"=="			  => TokenKind::Punctuator(PunctuatorKind::Equals),
		"!="			  => TokenKind::Punctuator(PunctuatorKind::NotEquals),
		"&&"			  => TokenKind::Punctuator(PunctuatorKind::LogicalAnd),
		"||"			  => TokenKind::Punctuator(PunctuatorKind::LogicalOr),
		"+:"			  => TokenKind::Punctuator(PunctuatorKind::PlusColon),
		":<"			  => TokenKind::Punctuator(PunctuatorKind::ColonLessThan),
		"=>"			  => TokenKind::Punctuator(PunctuatorKind::Implies),
		"MC"              => TokenKind::MetadataComment(<CommentTableKey>),


    }
  }
